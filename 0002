Many many problems and misunderstandings . . .

First of all. I cannot see a linked list anywhere in your code. There is nowhere a statement or a avriable with a list.

Instead, you have a `Node` called "product" and 2 global pointers to this data type. Then you manually link the `Node` instances together and update the global pointers correspondingly.

There is no "Segregation of Duties" and there are a lot of repetitions.

The normal approach would be to create a `class` or `struct` DoublyLinkedList, which would contain nodes and the first and last pointers. Then this `class` or `struct` would provide all interface functions that you need and hide all implementation internas from the oudsite world.

Then, for storing and saving. You would of couse never store the pointers of the node "products" and cannot store a `std::string` as a binary. `std::string`is a complex data type with some internal state invisible for you. This does not work.

Instead you need to do a serialization / deserialization of your data. This means that you just store the important data as a readable text.

The standard approach is to verwrite the insertion operator `<<` and the extraction operator `>>` for you custom data type, here "product".

This can be done by simply adding 
```
friend std::ostream& operator << (std::ostream& os, const product& p) { return os << p.name << '\n'; }
friend std::istream& operator >> (std::istream& is, product& p) { return std::getline(is, p.name); }
```

These statements (put into your `struct` definition) will overwrite the `<<` and `>>` operator for your `struct`. Within the function, we simply write the "name" to the stream or read the "name" from the stream.

After having defined those parameters, we could write:
```
product p;
std::cin >> p;
std::cout << p;
```

The compiler will recognize data type "product" used with the `>>` or `<<` operator and call the functions defined in your `struct`.


----------

Additionally: You have some misunderstandings about new and pointers. You always create new `products`, even, if not needed.

For example in your "deleteP" function you write
```
    product* current = new product();
    current = first;
    product* prev = new product();
    prev = NULL;
```

Why to you create a new "product"? You jszt need a pointer.

So, the following approach must be used instead:

```
    product* current = first;
    product* prev = NULL;
```


----------

And this leads us to the next and most severe problem in your code. You are not releasing them memory that you allocate with the function `new`. `new` will allocate/get memory via the operating system. And all memory the you allocated, must be released again later with the `delete` functions.

And since you do not delete anything, you are creating memory leaks like hell.

Everthing that is `new`ed, must be `delete`d. 

And basically `new`. `delete` and raw pointers for owned memory should not be used in C++.


----------

But, one step after the other. First we fix the code with the minimum necessary correction (still with memory leaks). But adding de/serialization.

```
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

string registryName = "products.bin";

struct product {
    string name;
    product* next;
    product* previous;
    friend std::ostream& operator << (std::ostream& os, const product& p) { return os << p.name << '\n'; }
    friend std::istream& operator >> (std::istream& is, product& p) { return std::getline(is, p.name); }
}*first, * last;

void inP();
void outP();
void searchP();
void modifyP();
void deleteP();
void saveBin();
void loadBin();

int main() {


    int op;
    do {
        system("CLS");
        cout << "Menu:" << endl;
        cout << "1. Input a Product " << endl;
        cout << "2. Show the list " << endl;
        cout << "3. Search a Product " << endl;
        cout << "4. Modify a product " << endl;
        cout << "5. Delete a product " << endl;
        cout << "6. Save List " << endl;
        cout << "7. Load Binary List " << endl;
        cout << "8. Exit" << endl;
        cin >> op;
        cout << "\n";

        switch (op) {
        case 1: {
            inP();
            cout << "\n";
            system("PAUSE");
            break;
        }
        case 2: {
            outP();
            system("PAUSE");
            break;
        }
        case 3: {
            searchP();
            system("PAUSE");
            break;
        }
        case 4: {
            modifyP();
            system("PAUSE");
            break;
        }
        case 5:
        {
            deleteP();
            system("PAUSE");
            break;
        }
        case 6: {
            saveBin();
            break;
        }
        case 7: {
            loadBin();
            break;
        }
        case 8: {
            return 0;
        }
        default: cout << "No ingreso una opcion disponible" << endl;
            break;
        }
    } while (op != 8);

    return 0;
}

void inP() {
    product* nuevo = new product();
    cout << "Ingrese el nombre del producto: ";
    cin >> nuevo->name;

    if (first == NULL) {
        first = nuevo;
        first->next = NULL;
        first->previous = NULL;
        last = first;
    }
    else {
        last->next = nuevo;
        nuevo->next = NULL;
        nuevo->previous = last;
        last = nuevo;
    }

    cout << "Producto agregado correctamente a la lista" << endl;
}

void outP() {
    product* current = new product();
    current = first;

    if (first != NULL) {

        while (current != NULL) {
            cout << "\n" << current->name;
            current = current->next;
        }
    }
    else {
        cout << "No hay productos en la lista" << endl;
        cout << "\n";
    }
    cout << "\n" << endl;
}

void searchP() {

    product* current = first;
    bool found = false;

    string searchP;

    cout << "Ingrese el producto a buscar: ";
    cin >> searchP;

    if (first != NULL) {

        while (current != NULL && found != true) {

            if (current->name == searchP) {
                cout << "\n Producto ( " << searchP << " ) Encontrado \n" << endl;
                found = true;
            }
            current = current->next;

        }
        if (!found) {
            cout << "\n Producto no encontrado \n" << endl;
        }
    }
    else {
        cout << "\n La lista de productos esta vacia \n" << endl;
    }
}

void modifyP() {

    product* current = first;
    bool found = false;

    string searchP;

    cout << "Ingrese el producto a modificar: ";
    cin >> searchP;

    if (first != NULL) {

        while (current != NULL && found != true) {

            if (current->name == searchP) {
                cout << "\n Producto ( " << searchP << " ) Encontrado \n" << endl;
                cout << "\n Ingrese el nuevo nombre del Producto: ";
                cin >> current->name;
                cout << "\n Producto Modificado Correctamente \n" << endl;
                found = true;
            }
            current = current->next;

        }
        if (!found) {
            cout << "\n Producto no encontrado \n" << endl;
        }
    }
    else {
        cout << "\n La lista de productos esta vacia \n" << endl;
    }
}

void deleteP() {

    product* current = first;
    product* prev = NULL;
    bool found = false;

    string searchP;

    cout << "Ingrese el producto a eliminar: ";
    cin >> searchP;

    if (first != NULL) {

        while (current != NULL && found != true) {

            if (current->name == searchP) {
                cout << "\n Producto ( " << searchP << " ) Encontrado \n" << endl;

                if (current == first) {
                    first = current->next;
                    first->previous = NULL;
                }
                else if (current == last) {
                    prev->next = NULL;
                    last = prev;
                }
                else {
                    prev->next = current->next;
                    current->next->previous = prev;
                }
                cout << "\n Producto Eliminado" << endl;
                found = true;
            }
            prev = current;
            current = current->next;
        }
        if (!found) {
            cout << "\n Producto no encontrado \n" << endl;
        }
    }
    else {
        cout << "\n La lista de productos esta vacia \n" << endl;
    }
}

void saveBin() {

    ofstream os(registryName);
    if (os) {
        product* indice = first;
        while (indice != NULL) {
            os << *indice;
            indice = indice->next;
        }
    }
}

void loadBin() {
    ifstream is(registryName );
    if (is) {
        std::string name;
        while (is >> name) {
            product *reader = new product;
            reader->name = name;
            reader->next = NULL;
            cout << reader->name << endl;

            if (first == NULL) {
                first = reader;
                first->next = NULL;
                first->previous = NULL;
                last = first;
            }
            else {
                last->next = reader;
                reader->next = NULL;
                reader->previous = last;
                last = reader;
            }
        }
    }
}
```

This code still has many problems. The biggest ones are the memory leaks. And, an additional one. You have no "clearP" function, which will remove all nodes. Such a "clearP" function must normally be called before any "loadBin" function. Otherwise, id there are already elements available, "loadBin" will append data from the disk at the end of the nodes.

So, we need to add a "clearP" function. And in the next refactoring step, we will also release also the allocated memory. This we will do in the "deleteP" function and by calling "clearP" at the end of `main` and in the "loadBin" function. 

With this corrections we will get:

```
#include <iostream>
#include <fstream>
#include <string>
#include <limits>

using namespace std;

string registryName = "products.bin";

struct product {
    string name;
    product* next;
    product* previous;
    friend ostream& operator << (ostream& os, const product& p) { return os << p.name << '\n'; }
    friend istream& operator >> (istream& is, product& p) { return getline(is, p.name); }
}*first{ nullptr }, * last{ nullptr };

void inP();
void outP();
void searchP();
void modifyP();
void deleteP();
void saveP();
void loadP();
void clearP();

int main() {

    int op = 0;
    do {
        op = 0;
        while (op == 0) {
            system("CLS");
            cout << "Menu:" << endl;
            cout << "1. Input a Product " << endl;
            cout << "2. Show the list " << endl;
            cout << "3. Search a Product " << endl;
            cout << "4. Modify a product " << endl;
            cout << "5. Delete a product " << endl;
            cout << "6. Save List " << endl;
            cout << "7. Load List " << endl;
            cout << "8. Exit" << endl;
            if (not (cin >> op)) {
                op = 0;
                cin.clear();
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // skip bad input)
            }
        }
        cout << "\n";

        switch (op) {
        case 1: {
            inP();
            cout << "\n";
            system("PAUSE");
            break;
        }
        case 2: {
            outP();
            system("PAUSE");
            break;
        }
        case 3: {
            searchP();
            system("PAUSE");
            break;
        }
        case 4: {
            modifyP();
            system("PAUSE");
            break;
        }
        case 5:
        {
            deleteP();
            system("PAUSE");
            break;
        }
        case 6: {
            saveP();
            break;
        }
        case 7: {
            loadP();
            break;
        }
        case 8: {
            return 0;
        }
        default: cout << "No ingreso una opcion disponible" << endl;
            break;
        }
    } while (op != 8);

    clearP();

    return 0;
}

void inP() {
    product* nuevo = new product();
    cout << "Ingrese el nombre del producto: ";
    cin >> nuevo->name;

    if (first == nullptr) {
        first = nuevo;
        first->next = nullptr;
        first->previous = nullptr;
        last = first;
    }
    else {
        last->next = nuevo;
        nuevo->next = nullptr;
        nuevo->previous = last;
        last = nuevo;
    }

    cout << "Producto agregado correctamente a la lista" << endl;
}

void outP() {
    product* current = new product();
    current = first;

    if (first != nullptr) {

        while (current != nullptr) {
            cout << "\n" << current->name;
            current = current->next;
        }
    }
    else {
        cout << "No hay productos en la lista" << endl;
        cout << "\n";
    }
    cout << "\n" << endl;
}

void searchP() {

    product* current = first;
    bool found = false;

    string searchP;

    cout << "Ingrese el producto a buscar: ";
    cin >> searchP;

    if (first != nullptr) {

        while (current != nullptr && found != true) {

            if (current->name == searchP) {
                cout << "\n Producto ( " << searchP << " ) Encontrado \n" << endl;
                found = true;
            }
            current = current->next;

        }
        if (!found) {
            cout << "\n Producto no encontrado \n" << endl;
        }
    }
    else {
        cout << "\n La lista de productos esta vacia \n" << endl;
    }
}

void modifyP() {

    product* current = first;
    bool found = false;

    string searchP;

    cout << "Ingrese el producto a modificar: ";
    cin >> searchP;

    if (first != nullptr) {

        while (current != nullptr && found != true) {

            if (current->name == searchP) {
                cout << "\n Producto ( " << searchP << " ) Encontrado \n" << endl;
                cout << "\n Ingrese el nuevo nombre del Producto: ";
                cin >> current->name;
                cout << "\n Producto Modificado Correctamente \n" << endl;
                found = true;
            }
            current = current->next;

        }
        if (!found) {
            cout << "\n Producto no encontrado \n" << endl;
        }
    }
    else {
        cout << "\n La lista de productos esta vacia \n" << endl;
    }
}

void deleteP() {

    product* current = first;
    product* prev = nullptr;
    product* toDelete = nullptr;
    bool found = false;

    string searchP;

    cout << "Ingrese el producto a eliminar: ";
    cin >> searchP;

    if (first != nullptr) {

        while (current != nullptr && found != true) {

            if (current->name == searchP) {
                cout << "\n Producto ( " << searchP << " ) Encontrado \n" << endl;

                if (current == first) {
                    toDelete = first;
                    first = current->next;
                    first->previous = nullptr;
                    delete toDelete;
                }
                else if (current == last) {
                    toDelete = last;
                    prev->next = nullptr;
                    last = prev;
                    delete toDelete;
                }
                else {
                    toDelete = current;
                    prev->next = current->next;
                    current->next->previous = prev;
                    delete toDelete;
                }
                cout << "\n Producto Eliminado" << endl;
                found = true;
            }
            prev = current;
            current = current->next;
        }
        if (!found) {
            cout << "\n Producto no encontrado \n" << endl;
        }
    }
    else {
        cout << "\n La lista de productos esta vacia \n" << endl;
    }
}

void saveP() {

    ofstream os(registryName);
    if (os) {
        product* indice = first;
        while (indice != nullptr) {
            os << *indice;
            indice = indice->next;
        }
    }
}

void loadP() {
    ifstream is(registryName );
    if (is) {
        clearP();
        string name;
        while (is >> name) {
            product *reader = new product;
            reader->name = name;
            reader->next = nullptr;
            cout << reader->name << endl;

            if (first == nullptr) {
                first = reader;
                first->next = nullptr;
                first->previous = nullptr;
                last = first;
            }
            else {
                last->next = reader;
                reader->next = nullptr;
                reader->previous = last;
                last = reader;
            }
        }
    }
}

void clearP() {

    product* current = first;
    product* next = nullptr;

    if (first != nullptr) {

        while (current != nullptr) {
            next = current->next;
            delete current;
            current = next;
        }
    }
    first = nullptr;
    last = nullptr;
}
```

Still not a real llinked list, but already working.

If your are interested in potential implementations in a singly or doubly linked list you may refer to the below.

Singly linked list:

```
#include <iostream>
#include <iterator>
#include <initializer_list>
#include <algorithm>

// Very simple implementation of a forward list
template <class T>
class SinglyLinkedList {

    // The node
    struct Node {
        T data{};     // Data. Would normally be a templated argument
        Node* next{};   // And the pointer to the next node

        Node(const T& i, Node* n = nullptr) : data(i), next(n) {}; // Simple constructor to set a value and next pointer
    };

    Node* head{};       // This is the start of the list
    // It would be advisable to have a tail pointer. We use the more inefficient approach here
    Node* getLast() const { Node* n{ head }; while (n and n->next) n = n->next; return n; }

public:
    // Constructor / Destructor --------------------------------------------------------------------------------------------------------
    ~SinglyLinkedList() { clear(); }

    // Default constuctor
    SinglyLinkedList() {}   // Default

    // From an initialization list
    SinglyLinkedList(const std::initializer_list<T>& il) { clear();  for (const T& i : il) push_back(i); } // From initializer list

    // Copy constructor
    SinglyLinkedList(const SinglyLinkedList& other) { clear(); for (const T& i : other) push_back(i); }

    // Move constructor. Will steal the elements from the other 
    SinglyLinkedList(SinglyLinkedList&& other) noexcept { head = other.head; other.head = nullptr;}

    // Assignment operator
    SinglyLinkedList& operator = (const SinglyLinkedList& other) { clear(); for (const T& i : other) push_back(i); }

    // Move assignment operator 
    SinglyLinkedList& operator = (SinglyLinkedList&& other) { head = other.head; other.head = nullptr; }

    // Housekeeping --------------------------------------------------------------------------------------------------------------
    void clear() { Node* tmp{ head }; while (tmp) { Node* toDelete{ tmp }; tmp = tmp->next; delete toDelete; } head = nullptr; }
    int empty() const { return head == nullptr; }
    int size() const { int k{}; Node* n{ head }; while (n) { ++k; n = n->next; } return k; }

    // Modify content --------------------------------------------------------------------------------------------------------------
    void push_front(const T& i) { Node* n = new Node(i); n->next = head; head = n; };
    void push_back(const T& i) { Node* n = new Node(i); Node* l = getLast(); if (l) l->next = n; else head = n; }
    void pop_front() { if (head) { Node* tmp = head->next; delete head; head = tmp; } }
    void pop_back() { // This is a little bit more difficult in a singly linked list
        if (head) {
            Node* n{ head }, * previous{};
            while (n and n->next) {
                previous = n;
                n = n->next;
            }
            delete n;
            if (previous)
                previous->next = nullptr;
            else
                head->next = nullptr;
        }
    }

    // Access elements --------------------------------------------------------------------------------
    T& front() const { return head ? head->data : 0; };
    T back() const { Node* n = getLast(); return n ? n->data : 0; }

    // Add iterator properties to class ---------------------------------------------------------------
    struct iterator {                           // Local class for iterator
        Node* iter{};                           // Iterator is basically a pointer to the node
        Node* head{};

        // Define alias names necessary for the iterator functionality
        using iterator_category = std::bidirectional_iterator_tag;
        using difference_type = std::ptrdiff_t;
        using value_type = T;
        using pointer = T*;
        using reference = T&;

        // Constructor
        iterator() {}
        iterator(Node* n, Node* h) : iter(n), head(h) {}

        // Dereferencing
        reference operator *() const { return iter->data; }
        pointer operator ->() const { return &iter->data; }

        // Aithmetic operations
        iterator& operator ++() { if (iter) iter = iter->next; return *this; }
        iterator operator ++(int) { iterator temp{ *this }; ++* this; return temp; }

        // Clumsy subtratcion
        iterator& operator --() { Node* tmp = head; while (tmp and tmp->next != this->iter) tmp = tmp->next; iter = tmp;  return *this; }
        iterator operator --(int) { iterator temp{ *this }; --* this; return temp; }

        iterator operator +(const difference_type& n) const {
            iterator temp{ *this };  difference_type k{ n }; if (k > 0) while (k--)++temp; else while (k++)--temp; return temp;
        }
        iterator operator +=(const difference_type& n) {
            difference_type k{ n }; if (k > 0) while (k--)++* this; else while (k++)--* this; return *this;
        };
        iterator operator -(const difference_type& n) const {
            iterator temp{ *this };  difference_type k{ n }; if (k > 0) while (k--)--temp; else while (k++)++temp; return temp;
        }
        iterator operator -=(const difference_type& n) {
            difference_type k{ n }; if (k > 0) while (k--)--* this; else while (k++)++* this; return *this;
        };

        // Comparison
        bool operator != (const iterator& other) const { return iter != other.iter; }
        bool operator == (const iterator& other) const { return iter == other.iter; }
        bool operator < (const iterator& other) const { return other.iter - iter < 0; };
        bool operator <= (const iterator& other) const { return other.iter - iter <= 0; };
        bool operator > (const iterator& other) const { return other.iter - iter > 0; };
        bool operator >= (const iterator& other) const { return other.iter - iter >= 0; };

        // Difference. Also complicated, because no random access
        difference_type operator-(const iterator& other) const {
            difference_type result{};

            int indexThis{ -1 }, indexOther{ -1 }, index{};

            Node* nptr = head;
            while (nptr != nullptr) {
                if (nptr == iter)
                    indexThis = index;
                if (nptr == other.iter)
                    indexOther = index;
                nptr = nptr->next;
                ++index;
            }
            if (nptr == iter)
                indexThis = index;
            if (nptr == other.iter)
                indexOther = index;
            if (indexThis >= 0 and indexOther >= 0)
                result = indexThis - indexOther;
            return result;
        }
    };

    // Begin and end function to initialize an iterator
    iterator begin() const { return iterator(head, head); }
    iterator end() const { return iterator(nullptr, head); }

    // Functions typcical for forward lists ----------------------------------------------------------------------
    // Easy, becuase we can operate form the current iterator and do not need the "previous" element
    iterator insertAfter(iterator& pos, const T& i) {
        iterator result(nullptr, head);
        if (pos.iter and pos.iter->next) {
            Node* n = new Node(i, pos.iter->next);
            pos.iter->next = n;
            result.iter = n;
        }
        return result;
    }
    iterator eraseAfter(iterator& pos) {
        iterator result(nullptr, head);
        if (pos.iter and pos.iter->next) {
            Node* tmp = pos.iter->next->next;
            delete pos.iter->next;
            pos.iter->next = tmp;
            result.iter = pos.iter->next;
        }
        return result;
    }
};
```

Doubly linked list:

```
#include <iterator>
#include <initializer_list>
#include <algorithm>
#include <iostream>
#include <type_traits>
#include <vector>

// ------------------------------------------------------------------------------------------------
// This would be in a header file -----------------------------------------------------------------

// Type trait helper to identify iterators --------------------------------------------------------
template<typename T, typename = void>
struct is_iterator { static constexpr bool value = false; };
template<typename T>
struct is_iterator<T, typename std::enable_if<!std::is_same<typename std::iterator_traits<T>::value_type, void>::value>::type> {
    static constexpr bool value = true;
};

// The List class ---------------------------------------------------------------------------------
template <typename T>
class List {
    // Sub class for a Node -----------
    struct Node {
        T data{};
        Node* next{};
        Node* previous{};
        Node() {}
        Node(Node* const n, Node* const p) : next(n), previous(p) {}
        Node(Node* const n, Node* const p, const T& d) : next(n), previous(p), data(d) {}
    };

    // Private list data and functions --------
    Node* head{};
    size_t numberOfElements{};
    void init() { head = new Node(); head->next = head; head->previous = head; numberOfElements = 0; }

public:
    struct iterator;    // Forward declaration

    // Constructor --------------------
    List() { init(); }
    explicit List(const size_t count) { init(); insert(begin(), count); }
    explicit List(const size_t count, const T& value) { init(); insert(begin(), count, value); };
    template <typename Iter>
    List(const Iter& first, const Iter& last) { init(); insert(begin(), first, last); }
    List(const List& other) { init(), insert(begin(), other.begin(), other.end()); };

    List(List&& other) : head(other.head), numberOfElements(other.numberOfElements) { other.init(); }
    List(const std::initializer_list<T>& il) { init(); insert(begin(), il.begin(), il.end()); }
    template <int N> List(T(&other)[N]) { init(); insert(begin(), std::begin(other), std::end(other)); }
    template <int N> List(const T(&other)[N]) { init(); insert(begin(), std::begin(other), std::end(other)); }


    // Assignment ---------------------
    List& operator =(const List& other) { clear(); insert(begin(), other.begin(), other.end()); return *this; }
    List& operator =(List&& other) { clear(); head = other.head; numberOfElements = other.numberOfElements; other.init(); return *this; }
    List& operator =(const std::initializer_list<T>& il) { clear(); insert(begin(), il.begin(), il.end()); return *this; }
    template <int N> List& operator =(const T(&other)[N]) { clear(); insert(begin(), std::begin(other), std::end(other)); return *this; }
    template <int N> List& operator =(T(&other)[N]) { clear(); insert(begin(), std::begin(other), std::end(other)); return *this; }

    template <typename Iter> void assign(const Iter& first, const Iter& last) { clear(); insert(begin(), first, last); }
    template <int N> void assign(const T(&other)[N]) { clear(); insert(begin(), std::begin(other), std::end(other)); return *this; }
    template <int N> void assign(T(&other)[N]) { clear(); insert(begin(), std::begin(other), std::end(other)); return *this; }
    void assign(const size_t count, const T& value) { clear(); insert(begin(), count, value); }
    void assign(const std::initializer_list<T>& il) { clear(); insert(begin(), il.begin(), il.end()); }

    // Destructor ---------------------
    ~List() { clear(); }

    // Element Access -----------------
    T& front() { return *begin(); }
    T& back() { return *(--end()); }

    // Iterators ----------------------
    iterator begin() const { return iterator(head->next, head); }
    iterator end() const { return iterator(head, head); }

    // Capacity -----------------------
    size_t size() const { return numberOfElements; }
    bool empty() { return size() == 0; }

    // Modifiers ----------------------
    void clear();

    iterator insert(const iterator& insertBeforePosition, const T& value);
    iterator insert(const iterator& insertBeforePosition);
    template <class Iter, std::enable_if_t<is_iterator<Iter>::value, bool> = true>
    iterator insert(const iterator& insertBeforePosition, const Iter& first, const Iter& last);
    iterator insert(const iterator& insertBeforePosition, const size_t& count, const T& value);
    iterator insert(const iterator& insertBeforePosition, const std::initializer_list<T>& il);

    iterator erase(const iterator& posToDelete);
    iterator erase(const iterator& first, const iterator& last);

    void pop_front() { erase(begin()); };
    void push_front(const T& d) { insert(begin(), d); }

    void pop_back() { erase(--end()); };
    void push_back(const T& d) { insert(end(), d); }

    void resize(size_t count, const T& value);
    void resize(size_t count);

    void swap(List& other) { std::swap(head, other.head); std::swap(numberOfElements, other.numberOfElements); }

    // Operations --------------------
    void reverse();

    // Non standard inefficient functions --------------------------
    T& operator[](const size_t index) const { return begin()[index]; }

    // ------------------------------------------------------------------------
    // Define iterator capability ---------------------------------------------
    struct iterator {

        // Definitions ----------------
        using iterator_category = std::bidirectional_iterator_tag;
        using difference_type = std::ptrdiff_t;
        using value_type = T;
        using pointer = T*;
        using reference = T&;

        // Data -----------------------
        Node* iter{};
        Node* head{};

        // Constructor ----------------
        iterator(Node* const node, Node* const h) : iter(node), head(h) {};
        iterator() {};

        // Dereferencing --------------
        reference operator*() const { return iter->data; }
        reference operator->() const { return &**this; }

        // Arithmetic operations ------
        iterator operator++() { iter = iter->next; return *this; }
        iterator operator--() { iter = iter->previous; return *this; }
        iterator operator++(int) { iterator tmp = *this; ++* this; return tmp; }
        iterator operator--(int) { iterator tmp = *this; --* this; return tmp; }

        iterator operator +(const difference_type& n) const {
            iterator temp{ *this };  difference_type k{ n }; if (k > 0) while (k--)++temp; else while (k++)--temp; return temp;
        }
        iterator operator +=(const difference_type& n) {
            difference_type k{ n }; if (k > 0) while (k--)++* this; else while (k++)--* this; return *this;
        };
        iterator operator -(const difference_type& n) const {
            iterator temp{ *this };  difference_type k{ n }; if (k > 0) while (k--)--temp; else while (k++)++temp; return temp;
        }
        iterator operator -=(const difference_type& n) {
            difference_type k{ n }; if (k > 0) while (k--)--* this; else while (k++)++* this; return *this;
        };
        // Comparison ----------------- (typical space ship implementation)
        bool operator ==(const iterator& other) const { return iter == other.iter; };
        bool operator !=(const iterator& other) const { return iter != other.iter; };
        bool operator < (const iterator& other) const { return other.iter - iter < 0; };
        bool operator <= (const iterator& other) const { return other.iter - iter <= 0; };
        bool operator > (const iterator& other) const { return other.iter - iter > 0; };
        bool operator >= (const iterator& other) const { return other.iter - iter >= 0; };

        // Special non standard functions -----------------
        difference_type operator-(const iterator& other) const;
        reference operator[] (const size_t index);
    };
};


// ------------------------------------------------------------------------------------------------
// Implementation of list functions. This would normally go into a TCC file -----------------------

// List class functions ---------------
template <typename T>
void List<T>::clear() {

    for (Node* nextNode{}, * currentNode(head->next); currentNode != head; currentNode = nextNode) {
        nextNode = currentNode->next;
        delete currentNode;
    }
    init();
}
template <typename T>
typename List<T>::iterator List<T>::insert(const List<T>::iterator& insertBeforePosition, const T& value)
{
    Node* nodeInsertBeforePosition = insertBeforePosition.iter;
    Node* newNode = new Node(nodeInsertBeforePosition, nodeInsertBeforePosition->previous, value);
    nodeInsertBeforePosition->previous = newNode;
    (newNode->previous)->next = newNode;
    ++numberOfElements;
    return iterator(newNode, head);
}
template <typename T>
typename List<T>::iterator List<T>::insert(const List<T>::iterator& insertBeforePosition)
{
    Node* nodeInsertBeforePosition = insertBeforePosition.iter;
    Node* newNode = new Node(nodeInsertBeforePosition, nodeInsertBeforePosition->previous);
    nodeInsertBeforePosition->previous = newNode;
    (newNode->previous)->next = newNode;
    ++numberOfElements;
    return iterator(newNode, head);
}

template <typename T>
template <class Iter, std::enable_if_t<is_iterator<Iter>::value, bool>>
typename List<T>::iterator List<T>::insert(const List<T>::iterator& insertBeforePosition, const Iter& first, const Iter& last) {
    iterator result(insertBeforePosition.iter, head);
    if (first != last) {
        result = insert(insertBeforePosition, *first);
        Iter i(first);
        for (++i; i != last; ++i)
            insert(insertBeforePosition, *i);
    }
    return result;
}

template <typename T>
typename List<T>::iterator List<T>::insert(const List<T>::iterator& insertBeforePosition, const size_t& count, const T& value) {

    iterator result(insertBeforePosition.iter, head);
    if (count != 0u) {
        result = insert(insertBeforePosition, value);
        for (size_t i{ 1u }; i < count; ++i)
            insert(insertBeforePosition, value);
    }
    return result;
}

template <typename T>
typename List<T>::iterator List<T>::insert(const List<T>::iterator& insertBeforePosition, const std::initializer_list<T>& il) {
    return insert(insertBeforePosition, il.begin(), il.end());
}

template <typename T>
typename List<T>::iterator List<T>::erase(const List<T>::iterator& posToDelete) {

    iterator result = posToDelete;
    ++result;

    Node* nodeToDelete = posToDelete.iter;

    if (nodeToDelete != head) {

        nodeToDelete->previous->next = nodeToDelete->next;
        nodeToDelete->next->previous = nodeToDelete->previous;

        delete nodeToDelete;
        --numberOfElements;
    }
    return result;
}

template <typename T>
typename List<T>::iterator List<T>::erase(const List<T>::iterator& first, const List<T>::iterator& last) {
    iterator result{ end() };
    if (first == begin() && last == end())
        clear();
    else {
        while (first != last)
            first = erase(first);
        result = last;
    }
    return result;
}

template <typename T>
void List<T>::resize(size_t count) {
    if (numberOfElements < count)
        for (size_t i{ numberOfElements }; i < count; ++i)
            insert(end());
    else
        while (count--)
            pop_back();
}
template <typename T>
void List<T>::resize(size_t count, const T& value) {
    if (numberOfElements < count)
        for (size_t i{ numberOfElements }; i < count; ++i)
            insert(end(), value);
    else
        while (count--)
            pop_back();
}
template <typename T>
void List<T>::reverse() {
    const Node* oldHead = head;

    for (Node* nptr = head; ; nptr = nptr->previous) {
        std::swap(nptr->next, nptr->previous);
        if (nptr->previous == oldHead) // Previous was the original next
            break;
    }
}

// ------------------------------------
// Iterator functions -----------------
template <typename T>
typename List<T>::iterator::difference_type List<T>::iterator::operator-(const iterator& other) const {

    difference_type result{};
    Node* nptr = head;

    int indexThis{ -1 }, indexOther{ -1 }, index{};

    do {
        nptr = nptr->next;
        if (nptr == iter)
            indexThis = index;
        if (nptr == other.iter)
            indexOther = index;
        ++index;
    } while (nptr != head);

    if (indexThis >= 0 and indexOther >= 0)
        result = indexThis - indexOther;
    return result;
}
template <typename T>
typename List<T>::iterator::reference List<T>::iterator::operator[] (const size_t index) {
    Node* nptr = head->next;
    for (size_t i{}; i < index and nptr != head; ++i, nptr = nptr->next)
        ;
    return nptr->data;
}
```
